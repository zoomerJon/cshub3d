/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: linus1178 (https://sketchfab.com/linus1178)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/helicopter-dec45a28e6f346648c3d6585426157b8
title: helicopter
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { useFrame, useThree } from "@react-three/fiber";
import gsap from "gsap";

export default function Model(props) {
  const { nodes, materials } = useGLTF("/vitality-heli.glb");
  const [startPath, setStartPath] = useState(false);

  let tlPosition = gsap.timeline({ repeat: 0, smoothChildTiming: true });
  let tlRotation = gsap.timeline({ repeat: 0, smoothChildTiming: true });

  const wings = useRef();
  const group = useRef();
  const state = new useThree();

  useEffect(() => {
    if (!startPath) {
      cameraMovement();
      setStartPath(true);
    }

    // setTimeout(() => {
    //   // setStartPath(true);
    // }, 1000);
  });

  const cameraMovement = () => {
    tlPosition.to(state.camera.position, {
      x: 93,
      y: 280,
      z: -13,
      // ease: "power2.inOut",
      duration: 2.3,
    });
    tlPosition.to(
      state.camera.position,
      {
        x: -27.283836918132458,
        y: 227.3305898087181,
        z: 67.25115405585959,
        // ease: "power2.inOut",
        duration: 2.3,
      },
      "-=.5"
    );
    tlPosition.to(
      state.camera.position,
      {
        x: -10.24327707419875,
        y: 151.44618333150868,
        z: 182.30518823525763,
        // ease: "power2.inOut",
        duration: 2.3,
      },
      "-=.5"
    );
    tlPosition.to(
      state.camera.position,
      {
        x: 30,
        y: 120.89937095041674,
        z: 220,
        // ease: "power2.inOut",
        duration: 2.3,
      },
      "-=.5"
    );
    tlRotation.to(state.camera.rotation, {
      x: -0.6475214115189114,
      y: 0.3351443520871452,
      z: 0.24380323462016507,
      // ease: "power2.inOut",
      duration: 2.3,
    });
    tlRotation.to(
      state.camera.rotation,
      {
        x: -0.6821997326763988,
        y: -0.15657446086475119,
        z: -0.12599635288397604,
        // ease: "power2.inOut",
        duration: 2.3,
      },
      "-=.5"
    );
    tlRotation.to(
      state.camera.rotation,
      {
        x: -0.22075556559070192,
        y: -0.06224091076229965,
        z: -0,
        // ease: "power2.inOut",
        duration: 2.3,
      },
      "-=.5"
    );
    //     x: -8.209678830174354, y: 120.89937095041674, z: 148.08102403692214, _gsap: GSCache2}
    // VitalityHeli.jsx:105 EulerÂ {isEuler: true, _x: -0.26398525886824376, _y: 0.003016695602909704, _z: 0.0008153914296051984
    tlRotation.to(
      state.camera.rotation,
      {
        x: -0.1398525886824376,
        y: -0.01,
        z: -0.0,
        // ease: "power2.inOut",
        duration: 2.3,
      },
      "-=.5"
    );
  };

  useFrame((delta) => {
    const t = state.clock.getElapsedTime();

    // console.log(state.camera.position);
    // console.log(state.camera.rotation);

    group.current.rotation.y = -t;
    group.current.position.x = 40 + 30 * Math.cos(t);
    group.current.position.z = -40 + 30 * Math.sin(t);

    wings.current.rotation.y = t * 10;
  });

  return (
    <group {...props} ref={group} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <group ref={wings} position={[0, 2.97, -0.69]}>
            <mesh
              geometry={nodes.Object_6.geometry}
              material={materials["Material.001"]}
            />
          </group>
          <group position={[0.06, 1.81, -8.01]}>
            <mesh
              geometry={nodes.Object_8.geometry}
              material={materials["Material.001"]}
            />
          </group>
          <mesh
            geometry={nodes.Object_4.geometry}
            material={materials["Material.001"]}
          />
        </group>
      </group>
      <mesh
        geometry={nodes.Plane.geometry}
        material={materials["Material.002"]}
        position={[0, 4.14, -10.03]}
        rotation={[Math.PI / 2, 0, -Math.PI / 2]}
        scale={[1.55, 1.79, 0.98]}
      />
    </group>
  );
}

useGLTF.preload("/vitality-heli.glb");
